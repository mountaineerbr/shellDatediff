DATEDIFF.SH(1) v0.24.3 | General Commands Manual
Jamil Soni N
October 2024

NAME

   datediff.sh - Calculate time ranges / intervals between dates

SYNOPSIS

   datediff.sh [-Rrttuvvv] [-NUM] [-f"FMT"] DATE1 DATE2 [UNIT]
   datediff.sh -FF [-vv] [[DAY_IN_WEEK] [DAY_IN_MONTH]] [START_DATE]
   datediff.sh -eel [-v] YEAR..
   datediff.sh -m [-v] DATE..
   datediff.sh -h

DESCRIPTION

Calculate time interval (elapsed) between DATE1 and DATE2 in various
time units. The C-code date programme is optionally run to process
dates.

Extra functions include checking if YEAR is leap, generating Easter,
Carnaval, and Corpus Christi dates on a given YEAR and the phase of the
moon at DATE.

Main Function

In the main function, GNU date accepts mostly free format human readable
date strings. If using FreeBSD date, input DATE strings must be ISO-8601
(YYYY-MM-DDThh:mm:ss), unless option -f FMT is set to a new input time
format. If C-code date programme is not available then input must be
formatted as ISO-8601 or UNIX time.

If DATE is not set, defaults to now. If only one DATE is set, the first
one is assumed to be now or 1970.

To flag DATE as UNIX time, prepend an “at” sign “@” to it or set option
-r.

Stdin input supports one DATE string per line (max two lines) or two
ISO-8601 DATES separated by space in a single line. Input is processed
in a best effort basis.

Main Output

Output “RANGES” section displays intervals in different units of time
(years, or months, or weeks, or days, or hours, or minutes, or seconds
alone). It also displays a compound time range with all the above units
into consideration to each other.

Single UNIT time periods can be displayed in table format with option -t
and their scale set with command line option -NUM where NUM is an
integer. The least significant digit of the result is subject to
rounding. When last positional parameter UNIT is exactly one of Y, MO,
W, D, H, M, or S, only a single UNIT interval is printed to stdout.

Output “DATES” section prints two dates in ISO-8601 format or, if option
-R is set, RFC-5322 format.

Option -u sets or prints dates in Coordinated Universal Time (UTC) in
the main function. This affects how the C-code date programme process
dates.

Extra Functions

Option -e prints Easter dates for given YEARS (for Western Churches) and
option -ee additionally prints Carnaval and Corpus Christi dates.

Option -l checks if a YEAR is leap. Set option -v to decrease verbosity.
The ISO-8601 system assumes proleptic Gregorian calendar, year zero and
no leap seconds.

Option -m prints lunar phase at DATE as YYYY[-MM[-DD]], auto expansion
takes place on partial DATE input. DATE ought to be UTC time. Code
snippet adapted from NetHack.

Option -F prints the date of next Friday the 13th. The START_DATE must
be formated as YYY[-MM[-DD]]. Optionally, set day in the week, such as
Sunday, and day number in month as first and second positional
parameters. Set option -FF to print the following ten matches.

Timezone Offsets

DATE offsets as per ISO-8601 are supported throughout this script. When
environment $TZ is a positive or negative decimal number, such as UTC+3,
it is read as offset. Variable $TZ with timezone name or ID
(e.g. America/Sao_Paulo) is supported by C-code date warping only.

This script uses Bash / Ksh arithmetics to perform most time range
calculations.

Debug and Direct Execution

Option -d sets TZ=UTC, unsets verbose switches and run checks against
C-code datediff and C-code date. Set once to dump only when results
differ and set twice to code exit only.

Option -D disables C-code date warping and option -DD disables Bash/Ksh
printf %()T warping, too.

The project source is hosted at:

    <https://gitlab.com/fenixdragao/shelldatediff>
    <https://github.com/mountaineerbr/shellDatediff>

REFINEMENT RULES

Some time intervals can be calculated in more than one way depending on
the logic used in the compound time range display. We decided to mimic
Hroptatyr’s datediff refinement rules as often as possible.

Script error rate of the core code is estimated to be lower than one
percent after extensive testing with selected and corner-case sample
dates and times. Check the script source code and repository for
details.

ENVIRONMENT

CFACTOR

    Correction factor used in the lunar phase function.

    Defaults="-1892"

DATE_CMD

    Path to C-code date programme. GNU, BSD, AST, and Busybox date are
    supported.

TZ

    Offset time. POSIX time zone definition by the $TZ variable takes a
    different form from ISO-8601 standards, so that ISO UTC-03 is
    equivalent to setting $TZ=UTC+03.

    Only the C-code date programme can parse timezone names and IDS.

WARRANTY

Licensed under the GNU General Public License 3 or better. This software
is distributed without support or bug corrections. Many thanks for all
whose advice improved this script from c.u.shell.

Bash2.05b+, Ksh93 or Zsh is required. Bc or Ksh93 is required for
single-unit calculations. FreeBSD12+ or GNU date is optionally required.

SEE ALSO

-   Datediff from dateutils, by Hroptatyr <www.fresse.org/dateutils/>
-   PDD from Jarun <github.com/jarun/pdd>
-   AST date elapsed time option -E <github.com/att/ast>
-   Units from GNU. https://www.gnu.org/software/units/
-   Do calendrical savants use calculation to answer date questions? A
    functional magnetic resonance imaging study, Cowan and Frith, 2009.
    https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2677581/#!po=21.1864
-   Calendrical calculation, Dershowitz and Reingold, 1990
    http://www.cs.tau.ac.il/~nachum/papers/c/home/jsn/www/lab-shelldatediff/man/datediff.sh.1.mdc-paper.pdf
    https://books.google.com.br/books?id=DPbx0-qgXu0C
-   How many days are in a year? Manning, 1997.
    https://pumas.nasa.gov/files/04_21_97_1.pdf
-   Iana Time zone database https://www.iana.org/time-zones
-   Fun with Date Arithmetic (see replies)
    https://linuxcommando.blogspot.com/2009/11/fun-with-date-arithmetic.html

Tip: Division is but subtractions and multiplication but additions.
–Lost reference

EXAMPLES

Leap year check

   datediff.sh -l 2000
   datediff.sh -l {1980..2000}
   echo 2000 | datediff.sh -l

Moon phases for January 1996

   datediff.sh -m 1996-01

Print following Friday, 13th

   datediff.sh -F

Print following Sunday, 12th after 1999

   datediff.sh -F sun 12 1999

Single unit time periods

   datediff.sh 2022-03-01T00:00:00 2022-03-01T10:10:10 m
   datediff.sh '10 years ago' mo
   datediff.sh 1970-01-01 2000-02-02 y

Time ranges/intervals

   datediff.sh 2020-01-03T14:30:10 2020-12-24T00:00:00
   datediff.sh 0921-04-12 1999-01-31
   echo 1970-01-01 2000-02-02 | datediff.sh
   TZ=UTC+3 datediff.sh 2020-01-03T14:30:10-06 2021-12-30T21:00:10-03:20

GNU date warping

   datediff.sh 'next monday'
   datediff.sh 2019/6/28 1Aug
   datediff.sh '5min 34seconds'
   datediff.sh 1aug1990-9month now
   datediff.sh -- -2week-3day
   datediff.sh -- "today + 1day" @1952292365
   datediff.sh -2 -- '1hour ago 30min ago'
   datediff.sh today00:00 '12 May 2020 14:50:50'
   datediff.sh '2020-01-01 - 6months' 2020-01-01
   datediff.sh '05 jan 2005’ 'now - 43years -13 days'
   datediff.sh -u 2023-01-14T11:20:00Z '2023-01-14T11:20:00Z + 5 hours'
   datediff.sh @1561243015 @1592865415

BSD date warping

   datediff.sh -f'%m/%d/%Y' 6/28/2019 9/04/1970
   datediff.sh -r 1561243015 1592865415
   datediff.sh 200002280910.33 0003290010.00
   datediff.sh -- '-v +2d' '-v -3w'

OPTIONS

Extra Functions

-e [YEAR..]

    Print Western Easter dates.

-ee [YEAR..]

    Print Carnaval, Easter and Corpus Christi dates.

-FF [[DAY_IN_WEEK] [DAY_IN_MONTH]] [START_DATE]

    Print following Friday the 13th date.

-h

    Print this help page.

-l [YEAR..]

    Check if YEAR is leap year.

-m [YYYY[-MM[-DD]]]

    Print lunar phase at DATE (ISO UTC time).

Main Function

-[0-9]

    Set scale for single unit interval results.

-DD, -dd

    Debug options, check help page.

-f [FMT]

    Input time string format (only with BSD date).

-R

    Print human time in RFC-5322 format (verbose).

-r, -@

    Input DATES are UNIX times.

-t, -tt

    Table layouts display of single unit intervals (such as -vtt).

-u

    Set or print in UTC times instead of local times. This affects how
    C-code date process input dates.

-v, -vv, -vvv

    Change how output is displayed, verbose levels.
